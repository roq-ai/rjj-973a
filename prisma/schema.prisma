generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model organization {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model performance_evaluation {
  id                                             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                                        String?  @db.Uuid
  team_lead_id                                   String?  @db.Uuid
  evaluation                                     String   @db.VarChar(255)
  created_at                                     DateTime @default(now()) @db.Timestamp(6)
  updated_at                                     DateTime @default(now()) @db.Timestamp(6)
  user_performance_evaluation_team_lead_idTouser user?    @relation("performance_evaluation_team_lead_idTouser", fields: [team_lead_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_performance_evaluation_user_idTouser      user?    @relation("performance_evaluation_user_idTouser", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                                                               String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                                            String                   @unique @db.VarChar(255)
  firstName                                                        String?                  @db.VarChar(255)
  lastName                                                         String?                  @db.VarChar(255)
  roq_user_id                                                      String                   @db.VarChar(255)
  tenant_id                                                        String                   @db.VarChar(255)
  created_at                                                       DateTime                 @default(now()) @db.Timestamp(6)
  updated_at                                                       DateTime                 @default(now()) @db.Timestamp(6)
  organization                                                     organization[]
  performance_evaluation_performance_evaluation_team_lead_idTouser performance_evaluation[] @relation("performance_evaluation_team_lead_idTouser")
  performance_evaluation_performance_evaluation_user_idTouser      performance_evaluation[] @relation("performance_evaluation_user_idTouser")
  working_hours                                                    working_hours[]
}

model working_hours {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String?  @db.Uuid
  hours      Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
